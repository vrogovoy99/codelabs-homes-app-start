Tutorial:	https://youtu.be/k5E2AVpwsko?si=I5fD1I7joH3wfBFO

INSTALL REQUIRED SOFTWARE :
	1. https://nodejs.org/en
	2. once nodejs installed use Node Package Manager to install Angular CLI (command-line interface) library:
		npm install -g @angular/cli@latest
		if install fails then try: npm config set registry http://registry.npmjs.org
		to check installation: ng version
	3. create a new angular project: ng new hellow-world
	4. editor: code.visualstudio.com
		4.1. add VS to PATH:
			Ctrl + Shift + P
			Install 'code' command in PATH
		????
	5. to run the code from project directory (start HTTP server): ng serve
		the URL:  http://localhost:4200/
	6. Install TypeScript: npm install -g typescript
		validate installation: tsc --version
		convert TypeScrip file main.ts to javascript: tsc main.ts
		to compile ts into js and run js: tsc main.ts && node main.js

_______________________

GET STARTED WITH HOMES SAMPLE APPLICATIO:

	https://angular.dev/tutorials
	source code: https://github.com/angular/codelabs/tree/homes-app-start

	1. After installing angular (see above) download and unzip above repository. 
	3. test installation. run: ng serve
	4. Check if app is running: http://localhost:4200/


CREATING NEW APP/MODULE
	1. create a new angular project: ng new new-project-name version
	2. Create a new component: >ng generate component Home --standalone --inline-
	template 
	3. Modify main application component: src>app>app.component.tx


CODING
	1. Add new component in .ts:
		import {HomeComponent} from './home/home.component';
		...
		imports: [HomeComponent],
  		template: `HTML',
	2. Add new service
		ng generate service housing --skip-tests
	3. tutorial 9. ADD SERVICES
		3.1. housing.service.ts added (see step 2)
		3.2. modifications:
			HousingLocation imported
			housingLocationList array with properties info added in HousingService class definition
			getAllHousingLocations and getHousingLocationById methods are added in HousingService class definition
		3.3. Inject new service in house.service.ts (to replace local array of proprties)
			import HousingService
			in HomeComponent class definition add:
				housingLocationList: HousingLocation[] = [];
  				housingService: HousingService = inject(HousingService);
			in constructor method of the class populate housingLocationList with HousingService.getAllHousingLocations
	4. tutorial 10. ADD ROUTING
		3.1. add app/routes.ts with routes definitions array
		3.2. in main.ts import provideRouter and routeConfig; in bootstrap call add  {providers: [provideRouter(routeConfig)]}
		3.3. in app.component.ts:
			3.3.1. import RouterModule
			3.3.2. in @Component.import add RouterModule
			3.3.3. replace app-home with router-outlet
	5. enable FORM in details.component.ts
		5.1. add import {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';
		5.2. add  imports: [CommonModule, ReactiveFormsModule],
		5.3. in export class DetailComponent add
				route: ActivatedRoute = inject(ActivatedRoute);
				housingService = inject(HousingService);
				housingLocation: HousingLocation | undefined;
				applyForm = new FormGroup({
					firstName: new FormControl(''),
					lastName: new FormControl(''),
					email: new FormControl(''),
				});
		5.4. add method 
				submitApplication() {
					this.housingService.submitApplication(
					this.applyForm.value.firstName ?? '',
					this.applyForm.value.lastName ?? '',
					this.applyForm.value.email ?? '',
					);
				}
		5.5. add form to the template:
				<form [formGroup]="applyForm" (submit)="submitApplication()">
				<label for="first-name">First Name</label>
				<input id="first-name" type="text" formControlName="firstName" />
				<label for="last-name">Last Name</label>
				<input id="last-name" type="text" formControlName="lastName" />
				<label for="email">Email</label>
				<input id="email" type="email" formControlName="email" />
				<button type="submit" class="primary">Apply now</button>
				</form>
-------https://angular.dev/tutorials/first-app/13-search
	6. Enable search functionality in HomeComponent
		6.1. add filteringLocationList variable in export class HomeComponent
				filteredLocationList: HousingLocation[] = [];
		6.2. insert it in constructor
				this.filteredLocationList = this.housingLocationList;
		6.3. add method to keep entire homes list or filter out list with submitted parameters
		  		filterResults(text: string) {
					if (!text) {
					this.filteredLocationList = this.housingLocationList;
					return;
					}
					this.filteredLocationList = this.housingLocationList.filter(
					(housingLocation) => housingLocation?.city.toLowerCase().includes(text.toLowerCase()),
					);
				}
		6.4. alter HomeComponent template by adding #filter variable to input tag
				<input type="text" placeholder="Filter by city" #filter>
		6.5 bind button click event to a method
				<button class="primiry" type="button" (click)="filterResults(filter.value)">Search</button>
		6.6. change loop to go through filteredLocationList and not housingLocationList
				<app-housing-location *ngFor="let housingLocation of housingLocationList" 
-------https://angular.dev/tutorials/first-app/14-http
	7. Configure JSON server
		7.1. Install JSON server
			npm install -g json-server
		7.2. cretea db.json file in app root. file will contain array of House objects
		7.3. test server by viewing file contents
				npx json-server db.json 
			then navigate to 
				http://localhost:3000/locations
		7.4. in HousingService add 
			JSON server URL
				url = 'http://localhost:3000/locations';
			change methods to use JSON
				const data = await fetch(`${this.url}/${id}`);
    			return (await data.json()) ?? {};
			in HomeComponent and DetailComponent change constructor to use JSON instead of array
				this.housingService.getAllHousingLocations().then((housingLocationList: HousingLocation[]) => {
					this.housingLocationList = housingLocationList;
					this.filteredLocationList = housingLocationList;
				});
